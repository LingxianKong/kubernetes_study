#!/usr/bin/env ansible-playbook
# Usage:
# source openrc
# ansible-playbook site.yml -e "rebuild=false"
# Don't forget to delete the ports when clearing up.
---
- name: Deploy and prepare instances in OpenStack
  hosts: localhost

  vars:
    image: 9136e86b-14d9-4127-b3dd-f1cdb18b0dc6
    network: network1
    public_network: public
    key_name: lingxian_pc
    private_key: /home/vagrant/.ssh/id_rsa
    flavor: 2ba44887-5fe3-44cc-8bca-e2b60a206a66
    boot_from_vol: false
    security_groups:
      - default
    node_prefix: lingxiantest
    # Mater hostname must contain 'master', node hostname contains 'node'
    # Make sure the vm name complies with k8s naming convention, should not
    # contain '_'
    node_names:
      - master
      - node1
    pod_subnet: 192.168.0.0/16

  tasks:
    # Create ports separately in order to setup allowed_address_pairs
    - name: Create ports
      os_port:
        state: present
        name: "{{ node_prefix }}-k8s-{{ item }}"
        network: "{{ network }}"
        security_groups: "{{ security_groups }}"
        allowed_address_pairs:
          - ip_address: "{{ pod_subnet }}"
      with_items: "{{ node_names }}"

    - name: Create VMs
      os_server:
        state: present
        name: "{{ node_prefix }}-k8s-{{ item }}"
        boot_from_volume: "{{ boot_from_vol | bool }}"
        image: "{{ image }}"
        volume_size: 15
        key_name: "{{ key_name }}"
        nics: port-name={{ node_prefix }}-k8s-{{ item }}
        flavor: "{{ flavor }}"
        terminate_volume: true
        # Do not allocate floating ip
        auto_ip: false
      with_items: "{{ node_names }}"

    - name: Associate floating ip if needed
      os_floating_ip:
        state: present
        reuse: yes
        network: "{{ public_network }}"
        server: "{{ node_prefix }}-k8s-{{ item }}"
      with_items: "{{ node_names }}"
      when: public_network is defined

    - name: Gather facts about vms
      os_server_facts:
        server: "{{ node_prefix }}-k8s-*"

    - name: Wait for ssh ready
      wait_for: port=22 host="{{ item.private_v4 if public_network is undefined else item.public_v4 }}" search_regex=OpenSSH timeout=300 delay=5
      with_items: "{{ openstack_servers }}"

    - name: Add VMs to inventory
      add_host:
        name: "{{ item.name }}"
        groups: k8s_hosts
        ansible_user: ubuntu
        ansible_host: "{{ item.public_v4 }}"
        ansible_local_ip: "{{ item.private_v4 }}"
        ansible_public_ip: "{{ item.public_v4 }}"
        ansible_ssh_private_key_file: "{{ private_key }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items: "{{ openstack_servers }}"

    - name: Setup master group
      add_host:
        name: "{{ item.name }}"
        groups: k8s_master
        ansible_user: ubuntu
        ansible_host: "{{ item.public_v4 }}"
        ansible_local_ip: "{{ item.private_v4 }}"
        ansible_public_ip: "{{ item.public_v4 }}"
        ansible_ssh_private_key_file: "{{ private_key }}"
      when: item.name | regex_search('(master)')
      with_items: "{{ openstack_servers }}"

    - name: Setup nodes group
      add_host:
        name: "{{ item.name }}"
        groups: k8s_nodes
        ansible_user: ubuntu
        ansible_host: "{{ item.public_v4 }}"
        ansible_local_ip: "{{ item.private_v4 }}"
        ansible_public_ip: "{{ item.public_v4 }}"
        ansible_ssh_private_key_file: "{{ private_key }}"
      when: item.name | regex_search('(node)')
      with_items: "{{ openstack_servers }}"

- name: Prepare k8s hosts
  hosts: k8s_hosts
  become: true
  become_method: sudo
  gather_facts: false

  pre_tasks:
    - name: Wait for cloud init to finish
      raw: cloud-init status --wait

    - name: Install python 3
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python3-minimal)

    - name: Install packages
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - python3-pip
          - ansible
          - unzip
          - build-essential
          - python3-dev
          - python3-setuptools
          - libffi-dev
          - libxslt1-dev
          - libxml2-dev
          - libyaml-dev
          - libssl-dev
          - zlib1g-dev
          - jq
          - net-tools

    - name: Pin pip to 9.0.3
      shell: pip3 install pip==9.0.3

    - name: Install pypi libraries
      pip:
        name: "{{ libraries }}"
      ignore_errors: True
      vars:
        libraries:
          - python-openstackclient
          - python-octaviaclient
          - httpie

    - name: Gather facts after python installation
      setup: filter=ansible_*

    - name: Build hosts file
      lineinfile: dest=/etc/hosts line="{{ ansible_host }} {{ ansible_hostname }}" state=present

    - name: Disable swap memory
      shell: swapoff -a

  roles:
    - docker
    - k8s_cli

- import_playbook: reset_k8s.yaml rebuild={{ rebuild }}

- name: Set up k8s master
  hosts: k8s_master
  become: true
  become_method: sudo
  gather_facts: true

  roles:
    - kube_master

- name: Set up k8s node
  hosts: k8s_nodes
  become: true
  become_method: sudo
  gather_facts: false

  roles:
    - kube_node
